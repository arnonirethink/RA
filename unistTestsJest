//Funções
// Função 1 - dobrar um número
const doubleANumber = (number) => number * 2;
// console.log(doubleANumber(2)); // 4

// Função 2 - gerar nome completo
const createFullName = (firstName, lastName) => firstName + " " + lastName;
// console.log(createFullName("Luiz", "Arnoni")); // Luiz Arnoni

// Função 3 - caucular a largura de uma string
const calculateTheLenghtOfAString = (str) => {
  const length = str.length;
  console.log(`"${str}": `, length);
  return str.length;
};
// console.log(calculateTheLenghtOfAString2("Tamanho")); // 7

// Função 4 
const numbersArrayIntoString = (array) => {
  return array.reduce((acc, cur, index) => {
    if (index % 3 === 0 && index != 0) acc += ".";
    return (acc += cur);
  }, "");
};


// Função 5 - Criar um novo item dentro de languages
const programming = {
  languages: ["JavaScript", "Python", "Ruby"],
  isChallenging: true,
  isRewarding: true,
  difficulty: 8,
  jokes:
    "http://stackoverflow.com/questions/234075/what-is-your-best-programmer-joke",
};
const addNewLanguage = (object, newLanguage) => {
  object.languages.push(newLanguage);
  return object;
};
// console.log(addNewLanguage(programming, "PHP"));
// Test if languages have lenght + 1

// Função 6 - votersResult
const voters = [
  { name: "Bob", age: 30, voted: true },
  { name: "Jake", age: 32, voted: true },
  { name: "Kate", age: 25, voted: false },
  { name: "Sam", age: 20, voted: false },
  { name: "Phil", age: 21, voted: true },
  { name: "Ed", age: 55, voted: true },
  { name: "Tami", age: 54, voted: true },
  { name: "Mary", age: 31, voted: false },
  { name: "Becky", age: 43, voted: false },
  { name: "Joey", age: 41, voted: true },
  { name: "Jeff", age: 30, voted: true },
  { name: "Zack", age: 19, voted: false },
];

const votersResult = (data) =>
  data.reduce(
    (acc, cur) => {
      if (cur.age < 30) {
        acc.numYoungPeople += 1;
        if (cur.voted) acc.numYoungVotes += 1;
      } else if (cur.age < 40) {
        acc.numMidsPeople += 1;
        if (cur.voted) acc.numMidVotesPeople += 1;
      } else {
        acc.numOldsPeople += 1;
        if (cur.voted) acc.numOldVotesPeople += 1;
      }
      return acc;
    },
    {
      numYoungVotes: 0,
      numYoungPeople: 0,
      numMidVotesPeople: 0,
      numMidsPeople: 0,
      numOldVotesPeople: 0,
      numOldsPeople: 0,
    }
  );

// console.log(votersResult(voters));
/*
{ numYoungVotes: 1, // número de eleitores jovens que votaram
numYoungPeople: 4, // número de eleitores jovens
numMidVotesPeople: 3, // número de eleitores maduros que votaram
numMidsPeople: 4, // número de eleitores maduros
numOldVotesPeople: 3, // número de eleitores sêniores que votaram
numOldsPeople: 4 // número de eleitores sêniores
}
*/


///testes unitários das funções acima


describe("doubleANumber", () => {
  const array = Array.from({ length: numberOfTests }, () => {
    const randomNumber = Math.random();
    return [randomNumber, 2 * randomNumber];
  });

  it.each(array)(
    "should return the double of a value.",
    (input, expectedResult) => {
      expect(desafio.doubleANumber(input)).toBe(expectedResult);
    }
  );
});

describe("createFullName", () => {
  const configuration = {
    dictionaries: [ung.names],
    style: "capital",
  };

  const array = Array.from({ length: numberOfTests }, () => {
    const firstName = ung.uniqueNamesGenerator(configuration);
    const lastName = ung.uniqueNamesGenerator(configuration);

    return [firstName, lastName, `${firstName} ${lastName}`];
  });

  it.each(array)(
    "should return a concatenation of the strings",
    (firstName, lastName, expectedResult) => {
      expect(desafio.createFullName(firstName, lastName)).toEqual(
        expectedResult
      );
    }
  );
});

describe("calculateTheLengthOfAString", () => {
  const configuration = {
    dictionaries: [ung.colors, ung.adjectives, ung.animals],
  };

  const array = Array.from({ length: numberOfTests }, () => {
    const generatedString = ung.uniqueNamesGenerator(configuration);
    return [generatedString, generatedString.length];
  });

  it.each(array)(
    "should return the length of the string",
    (argument, expectedResult) => {
      expect(desafio.calculateTheLenghtOfAString(argument)).toBe(
        expectedResult
      );
    }
  );
});

describe("addNewLanguage", () => {
  const configuration = {
    dictionaries: [ung.animals],
  };

  const object = desafio.programming;

  const languages = [...desafio.programming.languages];

  const name = ung.uniqueNamesGenerator(configuration);

  const result = desafio.addNewLanguage(object, name);

  it("adds a new language to the object's language array", () => {
    expect(result).toMatchObject({
      languages: [...languages, name],
    });
  });

  it("increases array's size", () => {
    expect(result.languages.length).toBe(languages.length + 1);
  });
});

describe("numbersArrayIntoString", () => {
  const array = Array.from({ length: 4 }, () => {
    const numberArray = Array.from(
      { length: Math.round(Math.random() * 9) },
      () => Math.round(Math.random() * 9)
    );

    const string = numberArray
      .reduce((acc, el) => acc.concat(el), "")
      .replace(/(\d{3})(?=\d)/g, "$1.");

    return [numberArray, string];
  });

  it.each(array)(
    "should merge array elements to string",
    (array, expectedResult) => {
      expect(desafio.numbersArrayIntoString(array)).toBe(expectedResult);
    }
  );
});

describe("votersResult", () => {
  it("should return a similar object", () => {
    expect(desafio.votersResult(desafio.voters)).toMatchObject({
      numYoungVotes: 1, 
      numYoungPeople: 4,
      numMidVotesPeople: 3,
      numMidsPeople: 4,
      numOldVotesPeople: 3,
      numOldsPeople: 4,
    });
  });
});
